package sound;

import java.io.IOException;
import java.net.URL;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;

/**
 * This enum encapsulates all the sound effects of a game, so as to separate the sound playing
 * codes from the game codes.
 * 1. Define all your sound effect names and the associated wave file.
 * 2. To play a specific sound, simply invoke SoundEffect.SOUND_NAME.play().
 * 3. You might optionally invoke the static method SoundEffect.init() to pre-load all the
 *    sound files, so that the play is not paused while loading the file for the first time.
 * 4. You can use the static variable SoundEffect.volume to mute the sound.
 * 
 * @Author http://www3.ntu.edu.sg/home/ehchua/programming/java/J8c_PlayingSound.html
 * @Author Modified by Justin Arnett
 */
public enum SoundEffects {
    
    EXPLODE("explode.wav"),   // explosion
    GONG("gong.wav"),         // gong
    SHOOT("shoot.wav");       // bullet

    
    /** Nested inner class for specifying volume. */
    public static enum Volume {
        MUTE, LOW, MEDIUM, HIGH
    }

    /** Starting volume level. */
    private static Volume myVolume = Volume.LOW;

    /** Each sound effect has its own clip, loaded with its own sound file. */
    private Clip myClip;

    
    /**
     * Constructor to construct each element of the enum with its own sound file.
     * 
     * @param theSoundFileName The name of the sound file.
     */
    SoundEffects(final String theSoundFileName) {
        try {
            // Use URL (instead of File) to read from disk and JAR.
            final URL url = this.getClass().getClassLoader().getResource(theSoundFileName);
            // Set up an audio input stream piped from the sound file.
            final AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(url);
            // Get a clip resource.
            myClip = AudioSystem.getClip();
            // Open audio clip and load samples from the audio input stream.
            myClip.open(audioInputStream);
        } catch (final UnsupportedAudioFileException e) {
            e.printStackTrace();
        } catch (final IOException e) {
            e.printStackTrace();
        } catch (final LineUnavailableException e) {
            e.printStackTrace();
        }
    }

    
    /**
     * Play or Re-play the sound effect from the beginning, by rewinding.
     */
    public void play() {
        if (myVolume != Volume.MUTE) {
            if (myClip.isRunning()) {
                myClip.stop();   // Stop the player if it is still running
            }
            myClip.setFramePosition(0); // rewind to the beginning
            myClip.start();     // Start playing
        }
    }
    
    
    public void setVolume(final Volume theVolume) {
        myVolume = theVolume;
    }


    /**
     * Optionally pre-loads all of the sound files.
     */
    static void init() {
        values(); // calls the constructor for all the elements
    }

}


