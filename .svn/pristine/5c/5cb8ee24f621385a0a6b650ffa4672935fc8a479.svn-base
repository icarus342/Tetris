/*
 * TCSS 305 – Winter 2015
 * Assignment 6 - Tetris
 */

package gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.HashMap;
import java.util.Map;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 * The menu bar for Tetris.  Includes option for changing key bindings.
 * 
 * @author Justin Arnett (jarnett@uw.edu)
 * @version 04 March 2015
 */
@SuppressWarnings("serial")
public class MenuBar extends JMenuBar {
    
    /** The field length of the text fields in the key bindings window. */
    private static final int TEXT_LENGTH = 5;
    
    /** The primary JPanel of the key bindings window. */
    private final JPanel myPrimary;
    
    /** The JFrame of the key bindings window. */
    private KeyBindingsWindow myKeyBindingsWindow;
    
    /** The panel for rendering the game on the main window. */
    private final GamePanel myGamePanel;
    
    /** A map of the current key bindings. */
    private Map<KeyAction, Integer> myKeys;
    
    /** A map of the text fields attached to the action. */
    private final Map<KeyAction, JTextField> myActionFields;
    
    /** The list of text fields for key bindings. */
    private final Map<JTextField, Integer> myBindFields;
    
    /** The list of text fields and their label. */
    private final Map<JTextField, String> myTextFields;
    
    /** The text field that is the focus of the KeyListener. */
    private JTextField myFocusedField;
    
    /** The action that will is used for the focused field. */
    private KeyAction myFocusedAction;
    
    /** The KeyListener that is used for monitoring keystrokes to bind a key. */
    private final MyKeyListener myKeyStroke;
    
    /** Menu item for starting a new game. */
    private final JMenuItem myNewGameItem;
    
    /** Menu item for ending the current game. */
    private final JMenuItem myEndGameItem;
    
    

    /**
     * Constructor for the menu bar.
     * -- Options -- <br>
     * > Key Bindings <br>
     * 
     * @param theGamePanel The panel that renders the Tetris game.
     */
    public MenuBar(final GamePanel theGamePanel) {
        super();
        myPrimary = new JPanel();
        myKeyStroke = new MyKeyListener();
        myBindFields = new HashMap<JTextField, Integer>();
        myTextFields = new HashMap<JTextField, String>();
        myActionFields = new HashMap<KeyAction, JTextField>();
        myEndGameItem = new JMenuItem("End Game");
        myNewGameItem = new JMenuItem("New Game");
        myGamePanel = theGamePanel;
        myKeys = myGamePanel.getKeyBindings();
        initializeFields();
        createMenuBar();
    }
    
    
    /**
     * Initializes the text fields for the constructor.
     */
    private void initializeFields() {
        for (final KeyAction key : myKeys.keySet()) {
            final JTextField field = createBindField(key);
            myBindFields.put(field, myKeys.get(key));
            myTextFields.put(field, key.getName());
            myActionFields.put(key, field);
        }
    }
    
    
    /**
     * Creates a text field with a MouseListener that will
     * attach a KeyListener on click for binding a key.
     * 
     * @param theAction The action used for the key binding map.
     * @return The created text field.
     */
    private JTextField createBindField(final KeyAction theAction) {
        final JTextField field = new JTextField(TEXT_LENGTH);
        field.setFocusable(false);
        field.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(final MouseEvent theEvent) {
                if (myFocusedField == null) {
                    field.setBackground(Color.LIGHT_GRAY);
                    myFocusedField = field;
                    myFocusedAction = theAction;
                    myPrimary.setFocusable(true);
                    myPrimary.requestFocusInWindow();
                    myPrimary.addKeyListener(myKeyStroke);
                }
            }
        });
        return field;
    }
    
    
    /**
     * Creates the menu bar for the constructor.
     */
    private void createMenuBar() {

        myKeyBindingsWindow = new KeyBindingsWindow("Key Bindings");
        
        // File Menu setup.
        final JMenu fileMenu = new JMenu("File");
        fileMenu.setMnemonic(KeyEvent.VK_F);
        
        myNewGameItem.setMnemonic(KeyEvent.VK_N);
        myNewGameItem.setEnabled(false);
        myNewGameItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                firePropertyChange("NewGameUpdate", null, theEvent);
                myNewGameItem.setEnabled(false);;
                myEndGameItem.setEnabled(true);
            }
        });
        fileMenu.add(myNewGameItem);
        
        myEndGameItem.setMnemonic(KeyEvent.VK_E);
        myEndGameItem.setEnabled(true);
        myEndGameItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                firePropertyChange("EndGameUpdate", null, theEvent);
            }
        });
        fileMenu.add(myEndGameItem);
        
        add(fileMenu);
        // End of file menu setup.
        
        // Options Menu setup.
        final JMenu optionsMenu = new JMenu("Options");
        optionsMenu.setMnemonic(KeyEvent.VK_O);
        
        final JMenuItem keyBindings = new JMenuItem("Key Bindings...");
        keyBindings.setMnemonic(KeyEvent.VK_K);       
        keyBindings.addActionListener(new MyActionListener());
        optionsMenu.add(keyBindings);
        
        add(optionsMenu);
        // End of Options Menu setup.
    }
    
    
    /**
     *  Toggles menu items based on state of the game. 
     */
    public void gameOver() {
        myNewGameItem.setEnabled(true);
        myEndGameItem.setEnabled(false);
    }
    
    
    /**
     * The pop up window for changing key bindings.
     * 
     * @author Justin A.
     */
    private class KeyBindingsWindow extends JFrame {
        
        /**
         * Key bindings window constructor.
         * 
         * @param theName The window title.
         */
        KeyBindingsWindow(final String theName) {
            super(theName);
            start();
        }
        
        
        /**
         * Builds the components of the key binding window.
         */
        private void start() {
            // The main panel.
            final Box keyPanel = new Box(BoxLayout.PAGE_AXIS);
            
            // The individual panels for each key binding.
            for (final JTextField field : myBindFields.keySet()) {
                final JPanel panel = createPanel(myTextFields.get(field) + ": ", field);
                //panel.setAlignmentX(JComponent.RIGHT_ALIGNMENT);
                keyPanel.add(panel);
            }
            
            // The buttons
            final JPanel buttonPanel = new JPanel();
            // The save button that will commit the changed key bindings.
            final JButton saveButton = new JButton("Commit");
            saveButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(final ActionEvent theEvent) {
                    myGamePanel.setKeyBindings(myKeys);
                    closeWindowOperations();
                    myKeyBindingsWindow.dispatchEvent(new WindowEvent(myKeyBindingsWindow,
                                                                WindowEvent.WINDOW_CLOSING));
                }
            });
            buttonPanel.add(saveButton);
            // The cancel button that will revert the changed key bindings.
            final JButton cancelButton = new JButton("Cancel");
            cancelButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(final ActionEvent theEvent) {
                    closeWindowOperations();
                    myKeyBindingsWindow.dispatchEvent(new WindowEvent(myKeyBindingsWindow,
                                                                WindowEvent.WINDOW_CLOSING));
                }
            });
            buttonPanel.add(cancelButton);
         
            keyPanel.add(buttonPanel);
            
            myPrimary.add(keyPanel, BorderLayout.WEST);
            
            
            add(myPrimary);
            addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(final WindowEvent theWindowEvent) {
                    closeWindowOperations();
                }
            });
            myPrimary.setFocusable(true); // needs this or keyListener will not work!
            this.setFocusable(true);
            this.setResizable(false);
            pack();
            this.setLocationRelativeTo(null);  // need to center on other JFrame later
        }
        
        
        /**
         * Operations to remove KeyListener, change background
         * colors back to white, clears the focused field, and unpauses
         * the game.
         */
        private void closeWindowOperations() {
            if (myFocusedField != null) {
                myFocusedField.setBackground(Color.WHITE);
                myKeyBindingsWindow.removeKeyListener(myKeyStroke);
                myFocusedField = null; // Enables use of binding other keys.
            }
            //myGamePanel.unpause();
        }
        
        
        /**
         * Creates a JPanel that has a label and a text field for a key bind.
         * 
         * @param theLabel The label for the key bind.
         * @param theField The text field for the key bind.
         * @return The created panel for the key bind.
         */
        private JPanel createPanel(final String theLabel, final JTextField theField) {
            final JPanel panel = new JPanel(new FlowLayout());
            panel.add(new JLabel(theLabel));
            panel.add(theField);
            return panel;
        }
        
        
    }
    
    
    
    /**
     * Key listener that is used to listen for key presses to register
     * key bindings.
     * 
     * @author Justin Arnett
     *
     */
    private class MyKeyListener implements KeyListener {
        @Override
        public void keyPressed(final KeyEvent theEvent) {
            /* Checks to make sure there is a focused field and that
             * the key event doesn't already exist in the key map unless
             * it is for the current binding.
             */
            if (myFocusedField != null && (!myKeys.containsValue(theEvent.getKeyCode()) 
                               || myKeys.get(myFocusedAction).equals(theEvent.getKeyCode()))) {
                myFocusedField.setText(KeyEvent.getKeyText(theEvent.getKeyCode()));
                myFocusedField.setBackground(Color.WHITE);
                myKeys.put(myFocusedAction, theEvent.getKeyCode());
                myPrimary.removeKeyListener(myKeyStroke);
                myFocusedField = null;  // Enables use of binding other keys.
            } else if (myFocusedField != null && myKeys.containsValue(theEvent.getKeyCode())) {
                // In the event of the key event already exists, throw error pop up.
                JOptionPane.showMessageDialog(myPrimary.getParent(),
                                              "This Key is already bound!",
                                              "Error!",
                                              JOptionPane.ERROR_MESSAGE);
            }
        }
        @Override
        public void keyReleased(final KeyEvent theEvent) {
            // Not used.
        }
        @Override
        public void keyTyped(final KeyEvent theEvent) {
            // Not used.
        }        
    }
    
    /**
     * Menu item action listener for launching the key binding window.
     * 
     * @author Justin Arnett
     *
     */
    private class MyActionListener implements ActionListener {
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            //myKeys.clear();
            myKeys = myGamePanel.getKeyBindings();
            myKeyBindingsWindow.setVisible(true);
            myKeyBindingsWindow.setAlwaysOnTop(true);
            myGamePanel.pause();
            
            // Updates text fields to new key bindings.
            for (final KeyAction key : myKeys.keySet()) {
                myBindFields.put(myActionFields.get(key), myKeys.get(key));
            }
            for (final JTextField field : myBindFields.keySet()) {
                field.setText(KeyEvent.getKeyText(myBindFields.get(field)));
            }
        }
        
    }

}
