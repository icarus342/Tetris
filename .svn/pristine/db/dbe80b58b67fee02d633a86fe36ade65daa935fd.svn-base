package gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;

import model.Point;
import model.TetrisPiece;
import model.Board.GameStatus;

public class NextPiecePanel extends JPanel implements Observer {
    
    private TetrisPiece myNextPiece;
    private int myBlockSize;
    private Point myCenter;
    private Point myOrigin;

    
    public NextPiecePanel(final TetrisPiece theTetrisPiece) {
        super();
        myNextPiece = theTetrisPiece;
        displayPanel();
    }
    
    
    private void displayPanel() {
        setPreferredSize(new Dimension(180, 180));
        setBackground(Color.CYAN);
    }
    
    
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D graphic = (Graphics2D) theGraphics;
        graphic.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
                                 RenderingHints.VALUE_ANTIALIAS_ON);
        
        
        
        myBlockSize = this.getWidth() / myNextPiece.getWidth() * 3 / 4;
        
        myCenter = new Point(myNextPiece.getWidth() * myBlockSize / 2, myNextPiece.getHeight() * myBlockSize / 2);
        Point panelCenter = new Point(this.getWidth() / 2, this.getHeight() / 2);
        myOrigin = new Point(panelCenter.x() - myCenter.x(), panelCenter.y() - myCenter.y());
        
        
        
        graphic.setPaint(Color.BLACK);
        graphic.fill(new Rectangle2D.Double(0, 0, this.getWidth(), this.getHeight()));
        
        graphic.setPaint(myNextPiece.getColor());
        for (int i = 0; i < myNextPiece.getPoints().length; i++) {
            drawBlock(i, graphic);
        }
        
        
        
        
    }
    
    
    private void drawBlock(final int theIndex, final Graphics2D theGraphics) {
        for (final Point p : myNextPiece.getPoints()) {
            theGraphics.fill(new Rectangle2D.Double(p.x() * myBlockSize + myOrigin.x(),
                                                    (myNextPiece.getHeight() - p.y()) * myBlockSize + myOrigin.y(),
                                                    myBlockSize,
                                                    myBlockSize));
        }
    }
    
    
    public void update(final Observable theObj, final Object theArg) {
        if (theArg instanceof TetrisPiece) {
            myNextPiece = (TetrisPiece) theArg;
            repaint();
        }
        
        
    }

}
