/*
 * TCSS 305 – Winter 2015
 * Assignment 6 - Tetris
 */

package gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;
import java.util.TreeMap;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.SwingConstants;
import javax.swing.Timer;

import model.Board;
import model.Point;
import model.Board.BoardData;

/**
 * The panel the displays the game state of Tetris.
 * 
 * @author Justin Arnett (jarnett@uw.edu)
 * @version 01 March 2015
 */
@SuppressWarnings("serial")
public class GamePanel extends JPanel implements Observer {

    
    private int myBlockSize;
    private int myBlockHeightCheck;
    private int myBlockWidthCheck;
    private Point myCenter;
    private Point myOrigin;
    
    private Board myTetris;
    private List<Color[]> myGameData;
    
    private Timer myTimer;
    
    private JFrame myFrame;
    
    private int myLeftKey;
    private Action myLeftAction;
    
    private int myRightKey;
    private Action myRightAction;
    
    private int myDownKey;
    private Action myDownAction;
    
    private int myCWKey;
    private Action myCWAction;
    
    private int myCCWKey;
    private Action myCCWAction;
    
    private int myDropKey;
    private Action myDropAction;
    
    private boolean myGameIsOver;
    private JLabel myMessage;
    
    
    /**
     * Builds the display panel for a game of tetris.
     * 
     * @param theTetris The tetris game.
     */
    public GamePanel(final Board theTetris, final Timer theTimer, final JFrame theFrame) {
        super(true);  // Sets JPanel to enable double buffering.
        myFrame = theFrame;
        myTetris = theTetris;
        setBlockSize();
        myGameIsOver = false;
        myTimer = theTimer;
        startGameGUI();
    }
    
    private void setBlockSize() {
        myBlockHeightCheck = this.getHeight() / myTetris.getHeight();
        myBlockWidthCheck = this.getWidth() / myTetris.getWidth();
        
        if (myBlockHeightCheck < myBlockWidthCheck) {
            myBlockSize = myBlockHeightCheck;
        } else {
            myBlockSize = myBlockWidthCheck;
        }
        //System.out.println(myBlockWidthCheck + " x " + myBlockHeightCheck + " - BlockSize: " + myBlockSize);
    }
    
    
    private void startGameGUI() {
        //this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
        this.setPreferredSize(new Dimension(400, 800));
        this.setBackground(Color.LIGHT_GRAY);
        

        myMessage = new JLabel("- GAME OVER -");
        myMessage.setFont(new Font("Verdana", 1, 30));
        myMessage.setForeground(Color.WHITE);
        add(myMessage);
        myMessage.setVisible(myGameIsOver);
        
        registerActions();
        // default key bindings
        myLeftKey = KeyEvent.VK_A;
        myRightKey = KeyEvent.VK_D;
        myDownKey = KeyEvent.VK_S;
        myCWKey = KeyEvent.VK_E;
        myCCWKey = KeyEvent.VK_Q;
        myDropKey = KeyEvent.VK_W;
        
        enableKeys();
    }
    
    
    public void gameOver() {  
        disableKeys();
        myGameIsOver = true;
        repaint();
    }
    
    
    public void pause() {
        disableKeys();
        myTimer.stop();
    }
    
    public void unpause() {
        if (!myGameIsOver) {
            enableKeys();
            myTimer.start();
        }
    }
    
    public Map<String, Integer> getKeys() {
        Map<String, Integer> keys = new TreeMap<String, Integer>();
        keys.put("left", myLeftKey);
        keys.put("right", myRightKey);
        keys.put("down", myDownKey);
        keys.put("cw", myCWKey);
        keys.put("ccw", myCCWKey);
        keys.put("drop", myDropKey);
        return keys;
    }
    
    public void setKeys(final Map<String, Integer> theKeys) {
        disableKeys();
        myLeftKey = theKeys.get("left");
        myRightKey = theKeys.get("right");
        myDownKey = theKeys.get("down");
        myCWKey = theKeys.get("cw");
        myCCWKey = theKeys.get("ccw");
        myDropKey = theKeys.get("drop");
        if (!myGameIsOver) {
            enableKeys();
        }
    }
    
    
    private void disableKeys() {
        disableKey(myLeftKey);
        disableKey(myRightKey);
        disableKey(myDownKey);
        disableKey(myCWKey);
        disableKey(myCCWKey);
        disableKey(myDropKey);
    }
    
    private void enableKeys() {
        bindKey(myLeftAction, myLeftKey);
        bindKey(myRightAction, myRightKey);
        bindKey(myDownAction, myDownKey);
        bindKey(myCWAction, myCWKey);
        bindKey(myCCWAction, myCCWKey);
        bindKey(myDropAction, myDropKey);
    }
    
    
    private void registerActions() {
        myLeftAction = new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myTetris.left();
            }
        };
        
        myRightAction = new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myTetris.right();
            }
        };
        
        myDownAction = new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myTetris.down();
            }
        };
        
        myCWAction = new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myTetris.rotateCW();
            }
        };
        
        myCCWAction = new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myTetris.rotateCCW();
            }
        };
        
        myDropAction = new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myTetris.drop();
            }
        };
    }
    
    
    public void bindKey(final Action theAction, final int theKey) {
        getInputMap(WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(theKey, 0),
                                                theAction.toString());
        getActionMap().put(theAction.toString(), theAction);
    }
    
    
    public void disableKey(final int theKey) {
        getInputMap(WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(theKey, 0), "none");
    }
    
    
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D graphic = (Graphics2D) theGraphics;
        graphic.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
                                 RenderingHints.VALUE_ANTIALIAS_ON);
        
        //System.out.println(myBlockSize);
        setBlockSize();
        
        myCenter = new Point(myTetris.getWidth() * myBlockSize / 2, myTetris.getHeight() * myBlockSize / 2);
        Point panelCenter = new Point(this.getWidth() / 2, this.getHeight() / 2);
        myOrigin = new Point(panelCenter.x() - myCenter.x(), panelCenter.y() - myCenter.y());
        
        //System.out.println(panelCenter);
        //System.out.println(myCenter);
        //System.out.println(myOrigin);
        
        //System.out.println("(" + myCenter.x() + " - " + myOrigin.x() + ") * 2 = " +(myCenter.x() - myOrigin.x()) * 2);
        
        
        graphic.setPaint(Color.BLACK);
        graphic.fillRect(myOrigin.x(), myOrigin.y(), myCenter.x() * 2, myCenter.y() * 2);
        
        // Draws the board through a 2d array for the coordinates.
        for (int y = 0; y < myGameData.size() - 4; y++) {
            for (int x = 0; x < myGameData.get(y).length; x++) {
                drawBlock(x, y, graphic);
            }
        }
        if (myGameIsOver) {
            myMessage.setVisible(myGameIsOver);
        }
    }
    
    
    private void drawBlock(final int theX, final int theY, final Graphics2D theGraphics) {
        if (myGameData.get(theY)[theX] != null) {
            theGraphics.setPaint(myGameData.get(theY)[theX]);
            theGraphics.fill(new Rectangle2D.Double((theX) * myBlockSize + myOrigin.x(),
                                                    (myTetris.getHeight() - theY - 1) * myBlockSize + myOrigin.y(),
                                                    myBlockSize,
                                                    myBlockSize));
            theGraphics.setPaint(Color.BLACK);
            theGraphics.draw(new Rectangle2D.Double((theX) * myBlockSize + myOrigin.x() + 3,
                                                    (myTetris.getHeight() - theY - 1) * myBlockSize + myOrigin.y() + 3,
                                                    myBlockSize - 6,
                                                    myBlockSize - 6));
        }
    }
    
    
    
    
    @Override
    public void update(final Observable theObj, final Object theArg) {
        if (theArg instanceof BoardData) {
            myGameData = ((BoardData) theArg).getBoardData();
        }
        repaint();
        //System.out.println(myTetris);
    }
    
    
} // end of GamePanel


