/*
 * TCSS 305 – Winter 2015
 * Assignment 6 - Tetris
 */

package gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.Map;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 * The menu bar for Tetris.  Includes option for changing key bindings.
 * 
 * @author Justin Arnett (jarnett@uw.edu)
 * @version 04 March 2015
 */
@SuppressWarnings("serial")
public class MenuBar extends JMenuBar {
    
    /** The field length of the text fields in the key bindings window. */
    private static final int TEXT_LENGTH = 5;
    /** The string for the left key binding map. */
    private static final String LEFT_STRING = "left";
    /** The string for the right key binding map. */
    private static final String RIGHT_STRING = "right";
    /** The string for the down key binding map. */
    private static final String DOWN_STRING = "down";
    /** The string for the clockwise key binding map. */
    private static final String CW_STRING = "cw";
    /** The string for the counterclockwise key binding map. */
    private static final String CCW_STRING = "ccw";
    /** The string for the drop key binding map. */
    private static final String DROP_STRING = "drop";
                   
    
    
    /** The primary JPanel of the key bindings window. */
    private final JPanel myPrimary;
    
    /** The JFrame of the key bindings window. */
    private final KeyBindings myKeyBindings;
    
    /** The panel for rendering the game on the main window. */
    private final GamePanel myGamePanel;
    
    /** A map of the current key bindings. */
    private Map<String, Integer> myKeys;
    
    /** The text field for the left key binding. */
    private JTextField myLeftField;

    /** The text field for the right key binding. */
    private JTextField myRightField;

    /** The text field for the down key binding. */
    private JTextField myDownField;

    /** The text field for the clockwise key binding. */
    private JTextField myCWField;

    /** The text field for the counterclockwise key binding. */
    private JTextField myCCWField;

    /** The text field for the drop key binding. */
    private JTextField myDropField;
    
    /** The text field that is the focus of the KeyListener. */
    private JTextField myFocusedField;
    
    /** The string that will is used for the focused field. */
    private String myFocusedString;
    
    /** The KeyListener that is used for monitoring keystrokes to bind a key. */
    private final MyKeyListener myKeyStroke;
    
    

    /**
     * Constructor for the menu bar.
     * -- Options -- <br>
     * > Key Bindings <br>
     * 
     * @param theGamePanel The panel that renders the Tetris game.
     */
    public MenuBar(final GamePanel theGamePanel) {
        super();
        initializeFields();
        myPrimary = new JPanel();
        myKeyStroke = new MyKeyListener();
        myKeyBindings = new KeyBindings("Key Bindings");
        myGamePanel = theGamePanel;
        myKeys = myGamePanel.getKeys();
        createMenuBar();
    }
    
    
    /**
     * Initializes the text fields for the constructor.
     */
    private void initializeFields() {
        myLeftField = createBindField(LEFT_STRING);
        myRightField = createBindField(RIGHT_STRING);
        myDownField = createBindField(DOWN_STRING);
        myCWField = createBindField(CW_STRING);
        myCCWField = createBindField(CCW_STRING);
        myDropField = createBindField(DROP_STRING);
    }
    
    
    /**
     * Creates a text field with a MouseListener that will
     * attach a KeyListener on click for binding a key.
     * 
     * @param theString The string used for the key binding map.
     * @return The created text field.
     */
    private JTextField createBindField(final String theString) {
        final JTextField field = new JTextField(TEXT_LENGTH);
        field.setFocusable(false);
        field.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(final MouseEvent theEvent) {
                if (myFocusedField == null) {
                    field.setBackground(Color.LIGHT_GRAY);
                    myFocusedField = field;
                    myFocusedString = theString;
                    myPrimary.setFocusable(true);
                    myPrimary.requestFocusInWindow();
                    myPrimary.addKeyListener(myKeyStroke);
                }
            }
        });
        return field;
    }
    
    
    /**
     * Creates the menu bar for the constructor.
     */
    private void createMenuBar() {
        final JMenu optionsMenu = new JMenu("Options");
        optionsMenu.setMnemonic(KeyEvent.VK_O);
        
        final JMenuItem keyBindings = new JMenuItem("Key Bindings");
        keyBindings.setMnemonic(KeyEvent.VK_K);       
        keyBindings.addActionListener(new MyActionListener());
        optionsMenu.add(keyBindings);
        
        add(optionsMenu);
    }
    
    
    /**
     * The pop up window for changing key bindings.
     * 
     * @author Justin A.
     */
    private class KeyBindings extends JFrame {
        
        /**
         * Key bindings window constructor.
         * 
         * @param theName The window title.
         */
        KeyBindings(final String theName) {
            super(theName);
            start();
        }
        
        
        /**
         * Builds the components of the key binding window.
         */
        private void start() {
            // The main panel.
            final Box keyPanel = new Box(BoxLayout.PAGE_AXIS);
            
            // The individual panels for each key binding.
            final JPanel leftPanel = createPanel("Left: ", myLeftField);
            keyPanel.add(leftPanel);
            final JPanel rightPanel = createPanel("Right: ", myRightField);
            keyPanel.add(rightPanel);
            final JPanel downPanel = createPanel("Down: ", myDownField);
            keyPanel.add(downPanel);
            final JPanel cWPanel = createPanel("Clockwise: ", myCWField);
            keyPanel.add(cWPanel);
            final JPanel cCWPanel = createPanel("CounterClockwise: ", myCCWField);
            keyPanel.add(cCWPanel);
            final JPanel dropPanel = createPanel("Drop: ", myDropField);
            keyPanel.add(dropPanel);
            
            // The buttons
            final JPanel buttonPanel = new JPanel();
            // The save button that will commit the changed key bindings.
            final JButton saveButton = new JButton("Commit");
            saveButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(final ActionEvent theEvent) {
                    myGamePanel.setKeys(myKeys);
                    closeWindowOperations();
                    myKeyBindings.dispatchEvent(new WindowEvent(myKeyBindings,
                                                                WindowEvent.WINDOW_CLOSING));
                }
            });
            buttonPanel.add(saveButton);
            // The cancel button that will revert the changed key bindings.
            final JButton cancelButton = new JButton("Cancel");
            cancelButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(final ActionEvent theEvent) {
                    closeWindowOperations();
                    myKeyBindings.dispatchEvent(new WindowEvent(myKeyBindings,
                                                                WindowEvent.WINDOW_CLOSING));
                }
            });
            buttonPanel.add(cancelButton);
         
            keyPanel.add(buttonPanel);
            
            myPrimary.add(keyPanel, BorderLayout.WEST);
            
            
            add(myPrimary);
            addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(final WindowEvent theWindowEvent) {
                    closeWindowOperations();
                }
            });
            myPrimary.setFocusable(true); // needs this or keyListener will not work!
            this.setFocusable(true);
            this.setResizable(false);
            pack();
            this.setLocationRelativeTo(null);  // need to center on other JFrame later
        }
        
        
        /**
         * Operations to 
         */
        private void closeWindowOperations() {
            if (myFocusedField != null) {
                myFocusedField.setBackground(Color.WHITE);
                myKeyBindings.removeKeyListener(myKeyStroke);
                myFocusedField = null;
            }
            myGamePanel.unpause();
        }
        
        
        private JPanel createPanel(final String theLabel, final JTextField theField) {
            final JPanel panel = new JPanel(new FlowLayout());
            panel.add(new JLabel(theLabel));
            panel.add(theField);
            return panel;
        }
        
        
    }
    
    
    private class MyKeyListener implements KeyListener {
        @Override
        public void keyPressed(final KeyEvent theEvent) {
            if (myFocusedField != null && (!myKeys.containsValue(theEvent.getKeyCode()) || myKeys.get(myFocusedString).equals(theEvent.getKeyCode()))) {
                myFocusedField.setText(KeyEvent.getKeyText(theEvent.getKeyCode()));
                myFocusedField.setBackground(Color.WHITE);
                myKeys.put(myFocusedString, theEvent.getKeyCode());
                myPrimary.removeKeyListener(myKeyStroke);
                myFocusedField = null;
            } else if (myFocusedField != null && myKeys.containsValue(theEvent.getKeyCode())) {
                JOptionPane.showMessageDialog(myPrimary.getParent(),
                                              "This Key is already bound!",
                                              "Error!",
                                              JOptionPane.ERROR_MESSAGE);
            }
        }
        @Override
        public void keyReleased(KeyEvent arg0) {
            // Not used.
        }
        @Override
        public void keyTyped(KeyEvent arg0) {
            // Not used.
        }        
    }
    
    
    private class MyActionListener implements ActionListener {
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            myKeys = myGamePanel.getKeys();
            myKeyBindings.setVisible(true);
            myKeyBindings.setAlwaysOnTop(true);
            myGamePanel.pause();
            
            myLeftField.setText(KeyEvent.getKeyText(myKeys.get("left")));
            myRightField.setText(KeyEvent.getKeyText(myKeys.get("right")));
            myDownField.setText(KeyEvent.getKeyText(myKeys.get("down")));
            myCWField.setText(KeyEvent.getKeyText(myKeys.get("cw")));
            myCCWField.setText(KeyEvent.getKeyText(myKeys.get("ccw")));
            myDropField.setText(KeyEvent.getKeyText(myKeys.get("drop")));
        }
    }

}
