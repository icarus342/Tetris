/*
 * TCSS 305 – Winter 2015
 * Assignment 6 - Tetris
 */

package gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.Timer;

import model.Board;
import model.Board.BoardData;
import model.Point;

/**
 * The panel the displays the game state of Tetris.
 * 
 * @author Justin Arnett (jarnett@uw.edu)
 * @version 08 March 2015
 */
@SuppressWarnings("serial")
public class GamePanel extends JPanel implements Observer {

    /** Font size of game over message. */
    private static final int FONT_SIZE = 6;
    /** The preferred size of the game panel. */
    private static final Dimension PREFERRED_DIMENSION = new Dimension(400, 800);
    /** The amount of lines removed from the top of the Tetris board. */
    private static final int REMOVED_LINES = 4;
    /** The amount of padding for the inner square in each tetris block. */
    private static final int PADDING = 3;
    /** The default font for messages. */
    private static final String DEFAULT_FONT = "Verdana";
    
    /** The default left key binding. */
    private static final int DEFAULT_LEFT_BINDING = KeyEvent.VK_A;
    /** The default right key binding. */
    private static final int DEFAULT_RIGHT_BINDING = KeyEvent.VK_D;
    /** The default down key binding. */
    private static final int DEFAULT_DOWN_BINDING = KeyEvent.VK_S;
    /** The default clockwise key binding. */
    private static final int DEFAULT_CW_BINDING = KeyEvent.VK_E;
    /** The default counterclockwise key binding. */
    private static final int DEFAULT_CCW_BINDING = KeyEvent.VK_Q;
    /** The default drop key binding. */
    private static final int DEFAULT_DROP_BINDING = KeyEvent.VK_W;
    /** The default pause key binding. */
    private static final int DEFAULT_PAUSE_BINDING = KeyEvent.VK_P;
    
    /** The size of the rendered block in pixels. */
    private int myBlockSize;
    
    /** The origin point of the rendered Tetris board. */
    private Point myOrigin;
    
    /** The Tetris game. */
    private final Board myTetris;
    
    /** The tetris data for block locations. */
    private List<Color[]> myGameData;
    
    /** The timer used to run the tetris game. */
    private final Timer myTimer;
    
    /** Indicates that a game is over. */
    private boolean myGameIsOver;
    
    /** Indicates that the game is paused. */
    private boolean myGameIsPaused;
    
    /** Game Over message. */
    private JLabel myMessage;
    
    /** The map of actions and their key code. */
    private final Map<KeyAction, Integer> myKeys;
    
    /** The key bindings for the game. */
    private KeyBindings myKeyBindings;
    
    /** The pause action for the key binding. */
    private KeyAction myPauseKeyAction;
    
    
    /**
     * Builds the display panel for a game of tetris.
     * 
     * @param theTetris The tetris game.
     * @param theTimer The tetris game timer.
     */
    public GamePanel(final Board theTetris, final Timer theTimer) {
        super(true);  // Sets JPanel to enable double buffering.
        myTetris = theTetris;
        setBlockSize();
        myGameIsOver = false;
        myGameIsPaused = false;
        myTimer = theTimer;
        myKeys = new HashMap<KeyAction, Integer>();
        startGameGUI();
    }
    
    
    /**
     * Calculates the rendered block size depending on the height and
     * width of the game panel.
     */
    private void setBlockSize() {
        final int blockHeightCheck = this.getHeight() / myTetris.getHeight();
        final int blockWidthCheck = this.getWidth() / myTetris.getWidth();
        
        if (blockHeightCheck < blockWidthCheck) {
            myBlockSize = blockHeightCheck;
        } else {
            myBlockSize = blockWidthCheck;
        }
    }
    
    
    /**
     * Initializes the panel for rendering the tetris game.
     */
    private void startGameGUI() {
        //this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
        this.setPreferredSize(PREFERRED_DIMENSION);
        this.setBackground(Color.LIGHT_GRAY);
        

        myMessage = new JLabel("- GAME OVER -");
        myMessage.setFont(new Font(DEFAULT_FONT, 1, 30));
        myMessage.setForeground(Color.WHITE);
        add(myMessage);
        myMessage.setVisible(myGameIsOver);
        
        registerKeyActions();
        myKeyBindings = new KeyBindings(myKeys, this);
        
        
        myKeyBindings.enableAllKeys();
    }
    
    
    /**
     * Stops the current game and signals a game over.
     */
    public void gameOver() {  
        myKeyBindings.disableAllKeys();
        myGameIsOver = true;
        unpause();
        repaint();
    }
    
    
    /**
     * Starts a new Tetris game.
     */
    public void newGame() {
        unpause();
        myGameIsOver = false;
        myKeyBindings.disableAllKeys();
        myTetris.clear();
        myKeyBindings.enableAllKeys();
        myMessage.setVisible(false);
        repaint();
    }
    
    
    /**
     * Toggles the state of pause for Tetris.
     */
    public void togglePause() {
        if (myGameIsPaused) {
            unpause();
        } else {
            pause();
        }
    }
    
    
    /**
     * Pauses the current game by stopping the timer
     * and disabling key bindings.
     */
    public void pause() {
        myKeyBindings.disableAllKeys();
        myKeyBindings.enableKey(myPauseKeyAction);
        myTimer.stop();
        myGameIsPaused = true;
        repaint();
    }
    
    
    /**
     * Unpauses the current game by starting the timer
     * and enabling key binding if only the game is not
     * over.
     */
    public void unpause() {
        if (!myGameIsOver) {
            myKeyBindings.enableAllKeys();
            myTimer.start();
        }
        myGameIsPaused = false;
        repaint();
    }
    
    
    /**
     * Gets the map of key bindings.
     * 
     * @return The map of key bindings.
     */
    public Map<KeyAction, Integer> getKeyBindings() {
        return myKeyBindings.getKeys();
    }
    
    
    /**
     * Updates the key bindings of the Tetris game.
     * 
     * @param theKeys The new key bindings.
     */
    public void setKeyBindings(final Map<KeyAction, Integer> theKeys) {
        myKeyBindings.disableAllKeys();
        myKeyBindings.setKeys(theKeys);
        if (myGameIsOver || myGameIsPaused) {
            myKeyBindings.enableKey(myPauseKeyAction);
        } else {
            myKeyBindings.enableAllKeys();
        }
    }
    
    
    /**
     * Renders the tetris game in a resizable panel.
     * 
     * @param theGraphics The Graphics2D used for rendering.
     */
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D graphic = (Graphics2D) theGraphics;
        graphic.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
                                 RenderingHints.VALUE_ANTIALIAS_ON);
        
        //System.out.println(myBlockSize);
        setBlockSize();
        
        // Centers the game panel for resizing.
        final Point center = new Point(myTetris.getWidth() * myBlockSize / 2,
                                       myTetris.getHeight() * myBlockSize / 2);
        final Point panelCenter = new Point(this.getWidth() / 2, this.getHeight() / 2);
        myOrigin = new Point(panelCenter.x() - center.x(), panelCenter.y() - center.y());
        // Draws the game backdrop.
        graphic.setPaint(Color.BLACK);
        graphic.fillRect(myOrigin.x(), myOrigin.y(), center.x() * 2, center.y() * 2);
        
        // Draws the board through a 2d array for the coordinates.
        for (int y = 0; y < myGameData.size() - REMOVED_LINES; y++) {
            for (int x = 0; x < myGameData.get(y).length; x++) {
                drawBlock(x, y, graphic);
            }
        }
        
//        if (myGameIsPaused) {   // will only use if can get alpha working...
//            graphic.setColor(new Color(80, 80, 80));
//            graphic.fillRect(myOrigin.x(), myOrigin.y(), center.x() * 2, center.y() * 2);
//        }
        
        // Draws a pause message when the game is paused.
        if (myGameIsPaused) {
            graphic.setPaint(Color.DARK_GRAY);
            graphic.fillRoundRect(myOrigin.x() + center.x() / 3,
                             myOrigin.y() + center.y() / 5 * 2,
                             center.x() / FONT_SIZE * 8,
                             center.y() / FONT_SIZE + 3,
                             FONT_SIZE * 2, FONT_SIZE * 2);
            graphic.setPaint(Color.YELLOW);
            graphic.drawRoundRect(myOrigin.x() + center.x() / 3,
                                  myOrigin.y() + center.y() / 5 * 2,
                                  center.x() / FONT_SIZE * 8,
                                  center.y() / FONT_SIZE + 3,
                                  FONT_SIZE * 2, FONT_SIZE * 2);
            
            graphic.setFont(new Font(DEFAULT_FONT, 1, center.x() / FONT_SIZE));
            graphic.drawString("- Paused -",
                               myOrigin.x() + center.x() / 2,
                               myOrigin.y() + center.y() / 2);
        }  // End of pause message.
        
        if (myGameIsOver) {
            myMessage.setVisible(myGameIsOver);
        }
    }
    
    
    /**
     * Draws a single tetris block.
     * 
     * @param theX The x coordinate of the block.
     * @param theY The y coordinate of the block.
     * @param theGraphics The graphics.
     */
    private void drawBlock(final int theX, final int theY, final Graphics2D theGraphics) {
        theGraphics.setPaint(Color.GRAY);
        if (myGameData.get(theY)[theX] != null) {
            if (!myGameIsPaused) {
                theGraphics.setPaint(myGameData.get(theY)[theX]);
            }
            theGraphics.fillRect(theX * myBlockSize + myOrigin.x(),
                      (myTetris.getHeight() - theY - 1) * myBlockSize + myOrigin.y(),
                      myBlockSize,
                      myBlockSize);
            theGraphics.setPaint(Color.BLACK);
            theGraphics.drawRect(theX * myBlockSize + myOrigin.x() + PADDING,
                      (myTetris.getHeight() - theY - 1) * myBlockSize + myOrigin.y() + PADDING,
                      myBlockSize - (PADDING * 2),
                      myBlockSize - (PADDING * 2));
        }
    }
    
    
    @Override
    public void update(final Observable theObj, final Object theArg) {
        if (theArg instanceof BoardData) {
            myGameData = ((BoardData) theArg).getBoardData();
        }
        repaint();
        //System.out.println(myTetris);
    }
    
    

    /**
     * Registers abstract actions to the key binding actions.
     */
    private void registerKeyActions() {
        // Left key binding.
        final Action leftAction = new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myTetris.left();
            }
        };
        myKeys.put(new KeyAction(leftAction, "Left"), DEFAULT_LEFT_BINDING);
        
        // Right key binding.
        final Action rightAction = new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myTetris.right();
            }
        };
        myKeys.put(new KeyAction(rightAction, "Right"), DEFAULT_RIGHT_BINDING);
        
        // Down key binding.
        final Action downAction = new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myTetris.down();
            }
        };
        myKeys.put(new KeyAction(downAction, "Down"), DEFAULT_DOWN_BINDING);
        
        // Clockwise key binding.
        final Action cwAction = new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myTetris.rotateCW();
            }
        };
        myKeys.put(new KeyAction(cwAction, "Clockwise"), DEFAULT_CW_BINDING);
        
        // Counterclockwise key binding.
        final Action ccwAction = new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myTetris.rotateCCW();
            }
        };
        myKeys.put(new KeyAction(ccwAction, "Counterclockwise"), DEFAULT_CCW_BINDING);
        
        // Drop key binding.
        final Action dropAction = new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myTetris.drop();
            }
        };
        myKeys.put(new KeyAction(dropAction, "Drop"), DEFAULT_DROP_BINDING);
        
     // Pause key binding.
        final Action pauseAction = new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                togglePause();
            }
        };
        myPauseKeyAction = new KeyAction(pauseAction, "Pause");
        myKeys.put(myPauseKeyAction, DEFAULT_PAUSE_BINDING);
    }
    
    
} // end of GamePanel


